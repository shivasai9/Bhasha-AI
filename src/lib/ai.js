// @ts-nocheck
import { withRetry } from './utils';
import { CREATE_RANDOM_ARTICLE, CREATE_CUSTOM_ARTICLE } from './prompts';
import { getArticlesByLanguage } from './dbUtils';

class AIWrapper {
  constructor() {
    this.session = null;
  }

  async initialize() {
    try {
      // Don't reinitialize if we have a valid session
      if (this.session) return true;

      if (!window.ai?.languageModel) {
        console.warn("Chrome AI API not available");
        return false;
      }

      const { available } = await window.ai.languageModel.capabilities();
      if (available !== "readily") {
        console.warn("AI model not readily available");
        return false;
      }

      this.session = await window.ai.languageModel.create({
        systemPrompt: "You are a professional English content writer who creates engaging articles on interesting topics, maintaining factual accuracy without bias or vulgarity."
      });
      return true;
    } catch (error) {
      console.error("AI initialization failed:", error);
      return false;
    }
  }

  // TODO: Implement retry logic
  async generateArticle(customTopic = null) {
    try {
      const start = Date.now();
      // Don't proceed if initialization fails
      const initialized = await this.initialize();
      if (!initialized) throw new Error("Could not initialize AI");

      // Generate prompt once, outside of retry logic
      const existingArticles = await getArticlesByLanguage("english");
      const existingTopics = existingArticles.map(article => {
        // Extract the main topic from the title (everything before ":")
        const topic = article.title.split(":")[0].trim();
        return topic;
      });
      let prompt = "";
      if(existingTopics.length > 0 && !customTopic) {
      // Build the prompt once
      prompt = existingTopics.join("\n") + "\n\n";
      prompt += "**IMPORTANT INSTRUCTION**: The topics listed above are already generated by you. Generate a completely new article with a unique topic that is NOT related to the above topics.**\n\n";
      prompt += `
**Examples of related topics to avoid**:
- If the topic is "Space Exploration," avoid related topics like "Mars Missions," "Astronaut Training," or "Space Technology."
- If the topic is "The Amazing World of Jellyfish", avoid topics like "The Enigmatic Beauty of Jellyfish"

**Examples of acceptable new topics**:
- "The Evolution of Classical Music"
- "Innovations in Renewable Energy"
- "The Cultural Impact of Social Media"
`;
      }
      prompt += customTopic ? 
        CREATE_CUSTOM_ARTICLE.replace('{{topic}}', customTopic) :
        CREATE_RANDOM_ARTICLE;

      const generateWithRetry = async () => {
        console.log("******Generating article with prompt:********", prompt);
        const result = await this.session.prompt(prompt);
        return JSON.parse(result.trim());
      };

      const parsed = await withRetry(generateWithRetry, 5, 1000);
      const end = Date.now();
      const diff = (end - start)/1000;
      console.log(`Article generated in ${diff} seconds`);
      this.destroy();

      return {
        title: parsed.title || "Untitled Article",
        summary: parsed.summary || "No summary available.",
        imageKeywords: Array.isArray(parsed.imageKeywords) ? parsed.imageKeywords : [],
      };
    } catch (error) {
      console.error("Article generation failed:", error);
      this.destroy();
      throw error;
    }
  }

  destroy() {
    if (this.session) {
      this.session.destroy();
      this.session = null;
    }
  }
}

// Create singleton instance
export const aiWrapper = new AIWrapper();
